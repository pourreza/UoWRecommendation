<workflow xmlns="http://taverna.sf.net/2008/xml/t2flow" version="1" producedBy="taverna-2.1.0"><dataflow id="f73942c3-e2fc-4d74-90ef-472ffa44488b" role="top"><name>Workflow14</name><inputPorts><port><name>date_start</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>2008-01-01 00:00:00</text>
      </annotationBean>
      <date>2009-11-20 10:27:04.656 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>the start date of the periode where the overlap search happens</text>
      </annotationBean>
      <date>2009-11-20 10:26:52.546 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>date_end</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>The end date of the periode</text>
      </annotationBean>
      <date>2009-11-20 10:26:12.125 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>2008-01-02 00:00:00</text>
      </annotationBean>
      <date>2009-11-20 10:26:29.968 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>GOES_min</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>C6</text>
      </annotationBean>
      <date>2009-11-20 10:27:32.859 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter
xray_class &gt; value</text>
      </annotationBean>
      <date>2009-10-30 11:17:55.640 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter
xray_class &gt; value

empty string for none</text>
      </annotationBean>
      <date>2009-11-20 10:27:37.15 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>C6
empty string for none</text>
      </annotationBean>
      <date>2009-10-30 11:18:38.93 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>C6</text>
      </annotationBean>
      <date>2009-10-30 11:18:02.812 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>GOES_max</name><depth>0</depth><granularDepth>0</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter - optional</text>
      </annotationBean>
      <date>2009-10-30 11:05:09.156 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>X10
</text>
      </annotationBean>
      <date>2009-11-20 10:27:15.406 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>X10</text>
      </annotationBean>
      <date>2009-10-30 11:04:48.968 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>X10
empty string for none</text>
      </annotationBean>
      <date>2009-10-30 11:17:09.125 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter
xray_class &lt; value

empty string for none</text>
      </annotationBean>
      <date>2009-11-20 10:27:24.0 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter
</text>
      </annotationBean>
      <date>2009-10-30 11:16:55.640 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>Goes filter parameter
xray_class &lt; value
</text>
      </annotationBean>
      <date>2009-10-30 11:17:46.734 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port><port><name>instruments</name><depth>1</depth><granularDepth>1</granularDepth><annotations><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>hessi</text>
      </annotationBean>
      <date>2010-01-15 15:12:50.140 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.ExampleValue">
        <text>hessi-ec</text>
      </annotationBean>
      <date>2010-01-22 15:05:58.781 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>a list of instruments (hessi, hessi-ec, phoenix2)</text>
      </annotationBean>
      <date>2010-01-22 15:06:35.421 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain><annotation_chain encoding="xstream"><net.sf.taverna.t2.annotation.AnnotationChainImpl xmlns="">
  <annotationAssertions>
    <net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
      <annotationBean class="net.sf.taverna.t2.annotation.annotationbeans.FreeTextDescription">
        <text>a list of instruments</text>
      </annotationBean>
      <date>2010-01-15 15:12:28.812 GMT</date>
      <creators />
      <curationEventList />
    </net.sf.taverna.t2.annotation.AnnotationAssertionImpl>
  </annotationAssertions>
</net.sf.taverna.t2.annotation.AnnotationChainImpl></annotation_chain></annotations></port></inputPorts><outputPorts><port><name>VOTable_out</name><annotations /></port></outputPorts><processors><processor><name>sql</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://helio.i4ds.technik.fhnw.ch:8080/core/services/hec?wsdl</wsdl>
  <operation>sql</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>sql_input</name><inputPorts><port><name>arg0</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="arg0" to="arg0" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="sql" name="parameters" qname="{http://dpas.helio.i4ds.ch/}sql"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="arg0" qname="sql&amp;gt;arg0" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>arg0</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="arg0" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>sql_base</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>SELECT * FROM goes_xray_flare WHERE  time_start&gt;='%start_date%' AND time_start&lt;'%stop_date%' %goes% ORDER BY ntime_start;</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>combine_sql_query</name><inputPorts><port><name>stop_date</name><depth>0</depth></port><port><name>start_date</name><depth>0</depth></port><port><name>sql_base</name><depth>0</depth></port><port><name>goes_min</name><depth>0</depth></port><port><name>goes_max</name><depth>0</depth></port></inputPorts><outputPorts><port><name>sql_string</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="sql_base" to="sql_base" /><map from="stop_date" to="stop_date" /><map from="goes_max" to="goes_max" /><map from="start_date" to="start_date" /><map from="goes_min" to="goes_min" /></inputMap><outputMap><map from="sql_string" to="sql_string" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>String goes = new String("");
sql_string = sql_base.replace("%start_date%",start_date);
sql_string = sql_string.replace("%stop_date%",stop_date);
if(goes_min.length() &gt; 0) {
  goes = goes.concat(" AND xray_class &gt; '"+goes_min+"'");
}
if (goes_max.length() &gt; 0) {
   goes = goes.concat(" AND xray_class &lt; '"+goes_max+"'");
}
sql_string = sql_string.replace("%goes%",goes);</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>start_date</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>stop_date</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>sql_base</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>goes_min</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>goes_max</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>sql_string</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="stop_date" depth="0" /><port name="start_date" depth="0" /><port name="sql_base" depth="0" /><port name="goes_min" depth="0" /><port name="goes_max" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>getAllIventDates</name><inputPorts><port><name>voTable</name><depth>0</depth></port></inputPorts><outputPorts><port><name>startDates</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>positions</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>endDates</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="voTable" to="voTable" /></inputMap><outputMap><map from="positions" to="positions" /><map from="startDates" to="startDates" /><map from="endDates" to="endDates" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.io.StringReader;
import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;

private void getPositions(){
  NodeList nodesVO = docVO.getElementsByTagName("FIELD");
  for(int i=0; i&lt; nodesVO.getLength(); i++){
     Element voFieldNode = nodesVO.item(i);
     String name = voFieldNode.getAttribute("name");
     if(name.trim().equals("ntime_start")){
        pos_start_vo = i;
     } else if(name.trim().equals("ntime_end")){
        pos_end_vo = i;
     } else if(name.trim().equals("time_start")){
        pos_startA_vo = i;
     } else if(name.trim().equals("time_end")){
        pos_endA_vo = i;
     }
  }
}


private void findDates() {
  NodeList dataListVO = docVO.getElementsByTagName("TR");
  debug= debug.concat(" length " + dataListVO.getLength()+ "\n");
  for(int i = 0; i &lt; dataListVO.getLength(); i++) {
     debug= debug.concat(" i " + i+ "datalength " + dataListVO.getLength() +"\n" );
     List date = new ArrayList();
     NodeList voDataChilds = dataListVO.item(i).getChildNodes();
     debug= debug.concat(" length2 " +voDataChilds.getLength()+ "\n");
     if(voDataChilds.item(pos_start_vo).getFirstChild()!= null) {
       debug= debug.concat("here 1");
       date.add(voDataChilds.item(pos_start_vo).getFirstChild().getNodeValue());
       startDates.add(voDataChilds.item(pos_start_vo).getFirstChild().getNodeValue());
       debug= debug.concat("here 1a");
     } else {
       debug= debug.concat("here 2");
       date.add(voDataChilds.item(pos_startA_vo).getFirstChild().getNodeValue());
       startDates.add(voDataChilds.item(pos_startA_vo).getFirstChild().getNodeValue());
       debug= debug.concat("here 2a");
     }
     if(voDataChilds.item(pos_end_vo).getFirstChild()!= null) {
       debug= debug.concat("here 3");
       date.add(voDataChilds.item(pos_end_vo).getFirstChild().getNodeValue());
       endDates.add(voDataChilds.item(pos_end_vo).getFirstChild().getNodeValue());
       debug= debug.concat("here 3a");
     } else {
       debug= debug.concat("here 4");
       date.add(voDataChilds.item(pos_endA_vo).getFirstChild().getNodeValue());
       endDates.add(voDataChilds.item(pos_endA_vo).getFirstChild().getNodeValue());
       debug= debug.concat("here 4a");
     }
     date.add(i);
     positions.add(i);
     dateList.add(date);
     debug= debug.concat(" end " +i + " \n");
  }
}

List dateList = new ArrayList();
List startDates = new ArrayList();
List endDates = new ArrayList();
List positions = new ArrayList();
String debug = "debug";
StringReader reader2 = new StringReader(voTable);
InputSource source2 = new InputSource(reader2);
Document docVO;
int pos_start_vo;
int pos_end_vo;
int pos_startA_vo;
int pos_endA_vo;
try {
  DOMParser parser = new DOMParser();
  parser.parse(source2);
  docVO = parser.getDocument();
  this.getPositions();
  this.findDates();
  reader2.close();
  if(dateList.size()==0){
    dateList.add(new ArrayList());
  }
  if(endDates.size()==0){
    endDates.add("2008-00-00 00:00:01");
  }
  if(startDates.size()==0){
    startDates.add("2008-00-00 00:00:00");
  }
  if(positions.size()==0){
    positions.add("0");
  }
}
catch (Exception e){
}


</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>voTable</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>startDates</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>endDates</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>positions</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="voTable" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>sql_output</name><inputPorts><port><name>input</name><depth>0</depth></port></inputPorts><outputPorts><port><name>return</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLOutputSplitterActivity</class><inputMap><map from="input" to="input" /></inputMap><outputMap><map from="return" to="return" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="sqlResponse" name="parameters" qname="{http://dpas.helio.i4ds.ch/}sqlResponse"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="return" qname="sqlResponse&amp;gt;return" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>input</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>return</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="input" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>query_v1_solarmonitor</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://helio.i4ds.technik.fhnw.ch:8080/core/services/frontend?wsdl</wsdl>
  <operation>query_v1</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>query_v1_solarmonitor_input</name><inputPorts><port><name>instrument</name><depth>0</depth></port><port><name>date_from</name><depth>0</depth></port><port><name>date_to</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="date_from" to="date_from" /><map from="date_to" to="date_to" /><map from="instrument" to="instrument" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="query_v1" name="parameters" qname="{http://core.helio.i4ds.ch/}query_v1"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="instrument" qname="query_v1&amp;gt;instrument" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="date_from" qname="query_v1&amp;gt;date_from" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="date_to" qname="query_v1&amp;gt;date_to" /&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="max_results" qname="query_v1&amp;gt;max_results" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>instrument</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>date_from</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>date_to</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>max_results</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="instrument" depth="0" /><dot><port name="date_to" depth="0" /><port name="date_from" depth="0" /></dot></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>Solar_Montior</name><inputPorts /><outputPorts><port><name>value</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>stringconstant-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.stringconstant.StringConstantActivity</class><inputMap /><outputMap><map from="value" to="value" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean xmlns="">
  <value>sm-seit</value>
</net.sf.taverna.t2.activities.stringconstant.StringConstantConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy /></iteration></iterationStrategyStack></processor><processor><name>datesSM</name><inputPorts><port><name>voTable</name><depth>0</depth></port></inputPorts><outputPorts><port><name>startDate</name><depth>1</depth><granularDepth>1</granularDepth></port><port><name>endDate</name><depth>1</depth><granularDepth>1</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="voTable" to="voTable" /></inputMap><outputMap><map from="startDate" to="startDate" /><map from="endDate" to="endDate" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.io.StringReader;
import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;
import java.util.Date;
import java.text.SimpleDateFormat;

private void getPositions(){
  NodeList nodesVO = docVO.getElementsByTagName("FIELD");
  for(int i=0; i&lt; nodesVO.getLength(); i++){
     Element voFieldNode = nodesVO.item(i);
     String name = voFieldNode.getAttribute("name");
     if(name.trim().equals("time_peak")){
        posPeak = i;
     }
  }
}

private void findDates() {
  NodeList dataListVO = docVO.getElementsByTagName("TR");
  for(int i = 0; i &lt; dataListVO.getLength(); i++) {
    NodeList voDataChilds = dataListVO.item(i).getChildNodes();
    String date=voDataChilds.item(posPeak).getFirstChild().getNodeValue().trim();
    startDate.add(date.replaceAll("..:..:..", "00:00:00"));
    endDate.add(date.replaceAll("..:..:..", "23:59:59"));

  }
}



List startDate = new ArrayList();
List endDate = new ArrayList();
debug = new String("debug\n");

StringReader reader2 = new StringReader(voTable);
InputSource source2 = new InputSource(reader2);
DOMParser parser2 = new DOMParser();
Document docVO;

int posPeak=-1;
parser2.parse(source2);
docVO = parser2.getDocument();
getPositions();
if(posPeak &gt;= 0){
  findDates();
}
reader2.close();
</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>voTable</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>startDate</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>1</granularDepth>
      <name>endDate</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>debug</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="voTable" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>query_v1_instrumentList</name><inputPorts><port><name>parameters</name><depth>0</depth></port></inputPorts><outputPorts><port><name>parameters</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.WSDLActivity</class><inputMap><map from="parameters" to="parameters" /></inputMap><outputMap><map from="parameters" to="parameters" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean xmlns="">
  <wsdl>http://helio.i4ds.technik.fhnw.ch:8080/core/services/frontend?wsdl</wsdl>
  <operation>query_v1</operation>
</net.sf.taverna.t2.activities.wsdl.WSDLActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="parameters" depth="0" /></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>query_v1_instrumentList_input</name><inputPorts><port><name>instrument</name><depth>0</depth></port><port><name>date_from</name><depth>0</depth></port><port><name>date_to</name><depth>0</depth></port></inputPorts><outputPorts><port><name>output</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>wsdl-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLInputSplitterActivity</class><inputMap><map from="date_from" to="date_from" /><map from="date_to" to="date_to" /><map from="instrument" to="instrument" /></inputMap><outputMap><map from="output" to="output" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean xmlns="">
  <wrappedTypeXML>&lt;s:extensions xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha"&gt;&lt;s:complextype optional="false" unbounded="false" typename="query_v1" name="parameters" qname="{http://core.helio.i4ds.ch/}query_v1"&gt;&lt;s:elements&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="instrument" qname="query_v1&amp;gt;instrument" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="date_from" qname="query_v1&amp;gt;date_from" /&gt;&lt;s:basetype optional="true" unbounded="false" typename="string" name="date_to" qname="query_v1&amp;gt;date_to" /&gt;&lt;s:basetype optional="false" unbounded="false" typename="int" name="max_results" qname="query_v1&amp;gt;max_results" /&gt;&lt;/s:elements&gt;&lt;/s:complextype&gt;&lt;/s:extensions&gt;</wrappedTypeXML>
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>instrument</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>date_from</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>date_to</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <allowsLiteralValues>false</allowsLiteralValues>
      <name>max_results</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/plain'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>output</name>
      <depth>0</depth>
      <mimeTypes class="java.util.Collections$SingletonList">
        <element class="string">'text/xml'</element>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.wsdl.xmlsplitter.XMLSplitterConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="instrument" depth="0" /><dot><port name="date_from" depth="0" /><port name="date_to" depth="0" /></dot></cross></strategy></iteration></iterationStrategyStack></processor><processor><name>combineData_2</name><inputPorts><port><name>voTable</name><depth>0</depth></port><port><name>solar_monitor_data</name><depth>1</depth></port><port><name>position</name><depth>1</depth></port><port><name>instrument_data</name><depth>2</depth></port><port><name>instruments</name><depth>1</depth></port></inputPorts><outputPorts><port><name>VOTable_out</name><depth>0</depth><granularDepth>0</granularDepth></port></outputPorts><annotations /><activities><activity><raven><group>net.sf.taverna.t2.activities</group><artifact>beanshell-activity</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.activities.beanshell.BeanshellActivity</class><inputMap><map from="position" to="position" /><map from="solar_monitor_data" to="solar_monitor_data" /><map from="instrument_data" to="instrument_data" /><map from="voTable" to="voTable" /><map from="instruments" to="instruments" /></inputMap><outputMap><map from="VOTable_out" to="VOTable_out" /></outputMap><configBean encoding="xstream"><net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean xmlns="">
  <script>import java.io.StringReader;
import org.w3c.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;
import java.io.StringWriter;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.lang.*;

private void write(Node node, String indent) {
        // The output depends on the type of the node
        switch(node.getNodeType()) {
        case Node.DOCUMENT_NODE: {       // If its a Document node
            Document doc = (Document)node;
            out.write(indent + "&lt;?xml version='1.0'?&gt;\n");  // Output header
            Node child = doc.getFirstChild();   // Get the first node
            while(child != null) {              // Loop 'till no more nodes
                write(child, indent);           // Output node
                child = child.getNextSibling(); // Get next node
            }
            break;
        } 
        case Node.DOCUMENT_TYPE_NODE: {  // It is a &lt;!DOCTYPE&gt; tag
            DocumentType doctype = (DocumentType) node;
            // Note that the DOM Level 1 does not give us information about
            // the the public or system ids of the doctype, so we can't output
            // a complete &lt;!DOCTYPE&gt; tag here.  We can do better with Level 2.
            out.write("&lt;!DOCTYPE " + doctype.getName() + "&gt;\n");
            break;
        }
        case Node.ELEMENT_NODE: {        // Most nodes are Elements
            Element elt = (Element) node;
            out.write(indent + "&lt;" + elt.getTagName());   // Begin start tag
            NamedNodeMap attrs = elt.getAttributes();     // Get attributes
            for(int i = 0; i &lt; attrs.getLength(); i++) {  // Loop through them
                Node a = attrs.item(i);
                out.write(" " + a.getNodeName() + "='" +  // Print attr. name
                          fixup(a.getNodeValue()) + "'"); // Print attr. value
            }
            out.write("&gt;\n");                             // Finish start tag

            String newindent = indent + "    ";           // Increase indent
            Node child = elt.getFirstChild();             // Get child
            while(child != null) {                        // Loop 
                write(child, newindent);                  // Output child
                child = child.getNextSibling();           // Get next child
            }

            out.write(indent + "&lt;/" +                   // Output end tag
                        elt.getTagName() + "&gt;\n");
            break;
        }
        case Node.TEXT_NODE: {                   // Plain text node
            Text textNode = (Text)node;
            String text = textNode.getData().trim();   // Strip off space
            if ((text != null) &amp;&amp; text.length() &gt; 0)   // If non-empty
                out.write(indent + fixup(text)+"\n");     // print text
            break;
        }
        case Node.PROCESSING_INSTRUCTION_NODE: {  // Handle PI nodes
            ProcessingInstruction pi = (ProcessingInstruction)node;
            out.write(indent + "&lt;?" + pi.getTarget() +
                               " " + pi.getData() + "?&gt;\n");
            break;
        }
        case Node.ENTITY_REFERENCE_NODE: {        // Handle entities
            out.write(indent + "&amp;" + node.getNodeName() + ";\n");
            break;
        }
        case Node.CDATA_SECTION_NODE: {           // Output CDATA sections
            CDATASection cdata = (CDATASection)node;
            // Careful! Don't put a CDATA section in the program itself!
            out.write(indent + "&lt;" + "![CDATA[" + cdata.getData() +
                        "]]" + "&gt;\n");
            break;
        }
        case Node.COMMENT_NODE: {                 // Comments
            Comment c = (Comment)node;
            out.write(indent + "&lt;!--" + c.getData() + "--&gt;\n");
            break;
        }
        default:   // Hopefully, this won't happen too much!
            System.err.println("Ignoring node: " + node.getClass().getName());
            break;
        }
    }

    // This method replaces reserved characters with entities.
private String fixup(String s) {
        StringBuffer sb = new StringBuffer();
        int len = s.length();
        for(int i = 0; i &lt; len; i++) {
            char c = s.charAt(i);
            switch(c) {
            default: sb.append(c); break;
            case '&lt;': sb.append("&amp;lt;"); break;
            case '&gt;': sb.append("&amp;gt;"); break;
            case '&amp;': sb.append("&amp;amp;"); break;
            case '"': sb.append("&amp;quot;"); break;
            case '\'': sb.append("&amp;apos;"); break;
            }
        }
        return sb.toString();
    }

private void addTableHeaders(List instrument, String prefix){
  NodeList nodes=null;
  StringReader reader;
  InputSource source;
  DOMParser parser = new DOMParser();
  Document doc;
  for(int i = 0; i &lt; instrument.size(); i++) {
    reader = new StringReader(instrument.get(i));
    source = new InputSource(reader);
    parser.parse(source);
    doc=parser.getDocument();
    nodes = doc.getElementsByTagName("return");
    if(nodes!= null &amp;&amp; nodes.getLength()&gt;=1){
      break;
    } else {
      reader.close();
    }
  }

  NodeList nodesVO = docVO.getElementsByTagName("TABLE");
  if(nodesVO.getLength() &gt;= 1){
    Node voTableNode = nodesVO.item(0);
    if(nodes != null &amp;&amp; nodes.getLength()&gt;= 1){
      Node observation = nodes.item(0);
      NodeList obsChilds = observation.getChildNodes();
      for(int i=0; i&lt; obsChilds.getLength(); i++){
        Element voFieldNode = docVO.createElement("FIELD");
        voFieldNode.setAttribute("name",prefix.concat(obsChilds.item(i).getLocalName()));
        voFieldNode.setAttribute("datatype","char");
        voFieldNode.setAttribute("arraysize","3400");
        voTableNode.insertBefore(voFieldNode, voTableNode.getLastChild());
      }
    }
  }
  reader.close();
}

private void addTableHeaderValue(String value){
  NodeList nodesVO = docVO.getElementsByTagName("TABLE");
  if(nodesVO.getLength() &gt;= 1){
    Node voTableNode = nodesVO.item(0);
    Element voFieldNode = docVO.createElement("FIELD");
    voFieldNode.setAttribute("name", value);
    voFieldNode.setAttribute("datatype","char");
    voFieldNode.setAttribute("arraysize","3400");
    voTableNode.insertBefore(voFieldNode, voTableNode.getLastChild());
  }
}

private writeExtraFields(Node nodeVO, Node nodeHessi) {
  String debug = new String("");
  NodeList listHessi = nodeHessi.getChildNodes();
  for(int i=0; i&lt; listHessi.getLength(); i++) {
    Node newNode = nodeVO.getFirstChild().cloneNode(false);
    Text voTextNode = docVO.createTextNode(listHessi.item(i).getFirstChild().getNodeValue());
    newNode.appendChild(voTextNode);
    nodeVO.appendChild(newNode);
  }
} 

private writeSolarMonitor(Node nodeVO, int pos) {
  NodeList nodes=null;
  StringReader reader;
  InputSource source;
  Document docSM;
  DOMParser parserSM = new DOMParser();
  reader = new StringReader(solar_monitor_data.get(pos));
  source = new InputSource(reader);
  parserSM.parse(source);
  docSM=parserSM.getDocument();
  nodes = docSM.getElementsByTagName("urlPreview");
  if(nodes!= null &amp;&amp; nodes.getLength()&gt;=1){
      NodeList obsChilds = nodes.item(0).getChildNodes();
      Node newNode = nodeVO.getFirstChild().cloneNode(false);
      Text voTextNode = docVO.createTextNode(obsChilds.item(0).getNodeValue());
      newNode.appendChild(voTextNode);
      nodeVO.appendChild(newNode);
  } else {

    Node newNode = nodeVO.getFirstChild().cloneNode(false);
    Text voTextNode = docVO.createTextNode("");
    newNode.appendChild(voTextNode);
    nodeVO.appendChild(newNode);
  }
  nodes = docSM.getElementsByTagName("urlPreviewThumb");
  if(nodes!= null &amp;&amp; nodes.getLength()&gt;=1){
      NodeList obsChilds = nodes.item(0).getChildNodes();
      Node newNode = nodeVO.getFirstChild().cloneNode(false);
      Text voTextNode = docVO.createTextNode(obsChilds.item(0).getNodeValue());
      newNode.appendChild(voTextNode);
      nodeVO.appendChild(newNode);
  } else {

    Node newNode = nodeVO.getFirstChild().cloneNode(false);
    Text voTextNode = docVO.createTextNode("");
    newNode.appendChild(voTextNode);
    nodeVO.appendChild(newNode);
  }
   reader.close();
}

private String findOverlaps() {

  NodeList[] nodes = new NodeList[instrument_data.size()];
  StringReader[] reader = new StringReader[instrument_data.size()];
  InputSource[] source = new InputSource[instrument_data.size()];
  int[] position2 = new int[instrument_data.size()];
  NodeList[] dataList = new NodeList[instrument_data.size()];
  NodeList[] dataList2 = new NodeList[instrument_data.size()];
  DOMParser[] parser = new DOMParser[instrument_data.size()];
  long[] min = new long[instrument_data.size()];
  long[] max = new long[instrument_data.size()];
  String debug = new String("");
  NodeList tableListVO = docVO.getElementsByTagName("TABLEDATA");
  NodeList dataListVO = docVO.getElementsByTagName("TR");
  if(dataListVO == null) {
    debug="dataListVO = null";
    return debug;
  }
  SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");

  for(int i =1; i&lt; instrument_data.size(); i++){
    if(instrument_data.get(i-1).size() != instrument_data.get(i).size()) {
      throw new Exception("data list lengths different -&gt; not from same periodes");
    }
  }

  // for all events;
  for(int i = instrument_data.get(0).size()-1; i&gt;=0; i--) {
    //init
   // debug = debug.concat("instrument_data size " + instrument_data.get(0).size() + " " + i);
 
    for(int a = 0; a &lt; instrument_data.size(); a++) {  
      parser[a] = new DOMParser();
      reader[a] = new StringReader(instrument_data.get(a).get(i));
      source[a] = new InputSource(reader[a]);
      parser[a].parse(source[a]);
      doc[a] = parser[a].getDocument();
      position2[a] = -1;
      min[a] = 0;
      max[a] = 0;


      dataList[a] = doc[a].getElementsByTagName("measurementStart");
      if(dataList[a] == null){
        dataList[a] = new NodeList();
      }
      dataList2[a] = doc[a].getElementsByTagName("measurementEnd");
      if(dataList2[a] == null){
        dataList2[a] = new NodeList();
      }
    }

    int pos = Integer.parseInt(position.get(i)); 

    Node voDataNode = dataListVO.item(pos);
    if(voDataNode == null)
    {
      for(int b = 0; b &lt; instrument_data.size(); b++) {
        reader[b].close();
      }
      debug = debug.concat("voDataNode = null \n" + pos);
      return debug;
    }
    Node parent = voDataNode.getParentNode();    


    //matching


    // for dates in instrument 0 - compare base
    for(int b = 0; b&lt;dataList[0].getLength();b++){
      //debug = debug.concat("\n" + dataList[0].item(b).getFirstChild().getNodeValue()+" ");
      min[0] = date.parse(dataList[0].item(b).getFirstChild().getNodeValue()).getTime();
      if(dataList2[0].getLength()&gt;0) {
        max[0] = date.parse(dataList2[0].item(b).getFirstChild().getNodeValue()).getTime();
      } else {
        max[0]=min[0];
      }
      position2[0]=b;
      
    for(int a = 1; a &lt; instrument_data.size(); a++) { 
      for(int j = position2[a]+1; j &lt; dataList[a].getLength(); j++) {
        position2[a]=-1;
        long start = date.parse(dataList[a].item(j).getFirstChild().getNodeValue()).getTime();
	long end=0;
        if(dataList2[a].getLength()&gt;0){
          end = date.parse(dataList2[a].item(j).getFirstChild().getNodeValue()).getTime();
        } else{
          end =start;
        }
        if(start &lt; max[a-1] &amp;&amp; end&gt; min[a-1]) {
          // overlap
          //debug=debug.concat(a+" " +dataList[a].item(j).getFirstChild().getNodeValue()+ " "); 
          position2[a]=j;
          if(min[a-1]&gt;start) {
            min[a]=start;
          } else {
            min[a]=min[a-1];
          }
          if(max[a-1]&lt;end) {
            max[a]= end;
          } else {
            max[a] = max[a-1];
          }
          if(a==instrument_data.size()-1){
            //found write data
            Node voDataNodeCurrent = voDataNode.cloneNode(true);
            for(int b = 0; b &lt; instrument_data.size(); b++) { 
              writeExtraFields(voDataNodeCurrent, doc[b].getElementsByTagName("return").item(position2[b]));
            }
            writeSolarMonitor(voDataNodeCurrent, pos);
            parent.insertBefore(voDataNodeCurrent, voDataNode);
            position2[a]=-1;
          } else {
            break;
          }
        }
      }
      if(position2[a]==-1) {
        // no match go back a level;
        a=a-2;       
      }
      if(a&lt;0) {
        //finish
        break;
      }
     
    }
   }

    parent.removeChild(voDataNode);

   
  }
   for(int a = 1; a &lt; instrument_data.size(); a++) { 
     reader[a].close();
   }

  return debug;
}



StringWriter out= new StringWriter(); 
StringReader reader2 = new StringReader(voTable);
InputSource source2 = new InputSource(reader2);
DOMParser parser2 = new DOMParser();
VOTable_out = new String("");
Document docVO;
Document[] doc= new Document[instrument_data.size()];
//try {
  parser2.parse(source2);
  docVO = parser2.getDocument();
  for(int i =0 ; i&lt; instrument_data.size(); i++) {
    this.addTableHeaders(instrument_data.get(i), instruments.get(i).concat("_"));
  }
  this.addTableHeaderValue("urlPreview");
  this.addTableHeaderValue("urlPreviewThumb");
  VOTable_out = VOTable_out.concat(this.findOverlaps());
  this.write(docVO.getDocumentElement(),"");
  VOTable_out = VOTable_out.concat(out.toString());
  reader2.close();

/*}
catch (Exception e){
  e.printStackTrace();
  StackTraceElement[] stacktrace = e.getStackTrace();
  for(int i =0 ; i&lt; stacktrace.length; i++) {
    VOTable_out = VOTable_out.concat(stacktrace[i].toString()+"\n");                       
  }
}*/

</script>
  <dependencies />
  <classLoaderSharing>workflow</classLoaderSharing>
  <localDependencies />
  <artifactDependencies />
  <inputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>voTable</name>
      <depth>0</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>position</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>instrument_data</name>
      <depth>2</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>solar_monitor_data</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
      <handledReferenceSchemes />
      <translatedElementType>java.lang.String</translatedElementType>
      <allowsLiteralValues>true</allowsLiteralValues>
      <name>instruments</name>
      <depth>1</depth>
      <mimeTypes>
        <string>text/plain</string>
      </mimeTypes>
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityInputPortDefinitionBean>
  </inputs>
  <outputs>
    <net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
      <granularDepth>0</granularDepth>
      <name>VOTable_out</name>
      <depth>0</depth>
      <mimeTypes />
    </net.sf.taverna.t2.workflowmodel.processor.activity.config.ActivityOutputPortDefinitionBean>
  </outputs>
</net.sf.taverna.t2.activities.beanshell.BeanshellActivityConfigurationBean></configBean><annotations /></activity></activities><dispatchStack><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Parallelize</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig xmlns="">
  <maxJobs>1</maxJobs>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ParallelizeConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.ErrorBounce</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Failover</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Retry</class><configBean encoding="xstream"><net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig xmlns="">
  <backoffFactor>1.5</backoffFactor>
  <initialDelay>1000</initialDelay>
  <maxDelay>5000</maxDelay>
  <maxRetries>10</maxRetries>
</net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.RetryConfig></configBean></dispatchLayer><dispatchLayer><raven><group>net.sf.taverna.t2.core</group><artifact>workflowmodel-impl</artifact><version>1.0</version></raven><class>net.sf.taverna.t2.workflowmodel.processor.dispatch.layers.Invoke</class><configBean encoding="xstream"><null xmlns="" /></configBean></dispatchLayer></dispatchStack><iterationStrategyStack><iteration><strategy><cross><port name="voTable" depth="0" /><port name="solar_monitor_data" depth="1" /><port name="position" depth="1" /><port name="instrument_data" depth="2" /><port name="instruments" depth="1" /></cross></strategy></iteration></iterationStrategyStack></processor></processors><conditions /><datalinks><datalink><sink type="processor"><processor>sql</processor><port>parameters</port></sink><source type="processor"><processor>sql_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>sql_input</processor><port>arg0</port></sink><source type="processor"><processor>combine_sql_query</processor><port>sql_string</port></source></datalink><datalink><sink type="processor"><processor>combine_sql_query</processor><port>stop_date</port></sink><source type="dataflow"><port>date_end</port></source></datalink><datalink><sink type="processor"><processor>combine_sql_query</processor><port>start_date</port></sink><source type="dataflow"><port>date_start</port></source></datalink><datalink><sink type="processor"><processor>combine_sql_query</processor><port>sql_base</port></sink><source type="processor"><processor>sql_base</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>combine_sql_query</processor><port>goes_min</port></sink><source type="dataflow"><port>GOES_min</port></source></datalink><datalink><sink type="processor"><processor>combine_sql_query</processor><port>goes_max</port></sink><source type="dataflow"><port>GOES_max</port></source></datalink><datalink><sink type="processor"><processor>getAllIventDates</processor><port>voTable</port></sink><source type="processor"><processor>sql_output</processor><port>return</port></source></datalink><datalink><sink type="processor"><processor>sql_output</processor><port>input</port></sink><source type="processor"><processor>sql</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>query_v1_solarmonitor</processor><port>parameters</port></sink><source type="processor"><processor>query_v1_solarmonitor_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>query_v1_solarmonitor_input</processor><port>instrument</port></sink><source type="processor"><processor>Solar_Montior</processor><port>value</port></source></datalink><datalink><sink type="processor"><processor>query_v1_solarmonitor_input</processor><port>date_from</port></sink><source type="processor"><processor>datesSM</processor><port>startDate</port></source></datalink><datalink><sink type="processor"><processor>query_v1_solarmonitor_input</processor><port>date_to</port></sink><source type="processor"><processor>datesSM</processor><port>endDate</port></source></datalink><datalink><sink type="processor"><processor>datesSM</processor><port>voTable</port></sink><source type="processor"><processor>sql_output</processor><port>return</port></source></datalink><datalink><sink type="processor"><processor>query_v1_instrumentList</processor><port>parameters</port></sink><source type="processor"><processor>query_v1_instrumentList_input</processor><port>output</port></source></datalink><datalink><sink type="processor"><processor>query_v1_instrumentList_input</processor><port>instrument</port></sink><source type="dataflow"><port>instruments</port></source></datalink><datalink><sink type="processor"><processor>query_v1_instrumentList_input</processor><port>date_from</port></sink><source type="processor"><processor>getAllIventDates</processor><port>startDates</port></source></datalink><datalink><sink type="processor"><processor>query_v1_instrumentList_input</processor><port>date_to</port></sink><source type="processor"><processor>getAllIventDates</processor><port>endDates</port></source></datalink><datalink><sink type="processor"><processor>combineData_2</processor><port>voTable</port></sink><source type="processor"><processor>sql_output</processor><port>return</port></source></datalink><datalink><sink type="processor"><processor>combineData_2</processor><port>solar_monitor_data</port></sink><source type="processor"><processor>query_v1_solarmonitor</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>combineData_2</processor><port>position</port></sink><source type="processor"><processor>getAllIventDates</processor><port>positions</port></source></datalink><datalink><sink type="processor"><processor>combineData_2</processor><port>instrument_data</port></sink><source type="processor"><processor>query_v1_instrumentList</processor><port>parameters</port></source></datalink><datalink><sink type="processor"><processor>combineData_2</processor><port>instruments</port></sink><source type="dataflow"><port>instruments</port></source></datalink><datalink><sink type="dataflow"><port>VOTable_out</port></sink><source type="processor"><processor>combineData_2</processor><port>VOTable_out</port></source></datalink></datalinks><annotations /></dataflow></workflow>